@page "/"
@page "/{RegisterRedirect:bool}"
@using Microsoft.Extensions.Options

@inject ILoginViewModel _loginViewModel
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IAccessTokenService _accessTokenService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IOptions<ApplicationSettings> _applicationSettings
@inject UIStateService UiStateService


<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <IonContent>

            <ion-slides pager="false" lines="full">
                <IonSlide>
                    <img src="https://i.ytimg.com/vi/v6Mt8HKAWa0/maxresdefault.jpg" style="max-height: 250px" />
                </IonSlide>
                <IonSlide>
                    <img src="https://blog.pospieszynski.net/assets/2017-04-23-ef-core/ef-logo.png" style="max-height: 250px" />
                </IonSlide>
                <IonSlide>
                    <img src="https://ies.solutions/wordpress/wp-content/uploads/jwt.png" style="max-height: 250px" />
                </IonSlide>
            </ion-slides>

            <IonList>
                <IonItem lines="none">
                    <IonLabel>Login</IonLabel>
                </IonItem>

                <EditForm Model="@_loginViewModel" OnValidSubmit="@AuthenticateJWT">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <IonItem lines="none">
                        <IonLabel position="stacked">Email address</IonLabel>
                        <IonInput TItem="string" @bind-Value="_loginViewModel.EmailAddress" placeholder="email address" @onkeypress="OnKeyPress"></IonInput>
                    </IonItem>
                    <IonItem lines="none">
                        <IonLabel position="stacked">Password</IonLabel>
                        <IonInput TItem="string" @bind-Value="_loginViewModel.Password" placeholder="email address" type="password" inputmode="email" @onkeypress="OnKeyPress"></IonInput>
                    </IonItem>
                    <IonItem>
                        <IonButton @onclick="AuthenticateJWT" color="primary">Login</IonButton>
                        <IonButton href="/createaccount" color="secondary">Create an account</IonButton>
                    </IonItem>
                </EditForm>
                <ExternalLogins />

            </IonList>
        </IonContent>
    </ContentTemplate>
</SpinLoader>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    [Parameter]
    public bool RegisterRedirect { get; set; }

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UiStateService.Title = "Login";
        //Initializing the login details for John Smith
        if (!RegisterRedirect)
        {
            _loginViewModel.EmailAddress = "john.smith@gmail.com";
            _loginViewModel.Password = "john.smith";
        }

        var authState = await AuthenticationState;

        if (authState.User.Identity is { IsAuthenticated: true })
        {
            _navigationManager.NavigateTo("/profile");
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await AuthenticateJWT();
    }

    private async Task AuthenticateJWT()
    {
        IsLoading = true;
        AuthenticationResponse authenticationResponse = await _loginViewModel.AuthenticateJWT();
        if (authenticationResponse.Token != string.Empty)
        {
            await _accessTokenService.SetAccessTokenAsync("jwt_token", authenticationResponse.Token);
            await ((CustomAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated();

            _navigationManager.NavigateTo("/profile");
        }
        else
        {
            _toastService.ShowError("Invalid username or password");
        }
        IsLoading = false;
    }
}
